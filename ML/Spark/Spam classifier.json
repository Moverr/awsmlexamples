{"paragraphs":[{"text":"%md\nThis notebook builds a simple spam classifier using several classification algorithms:\n* Logistic Regression <https://en.wikipedia.org/wiki/Logistic_regression> with SGD <https://en.wikipedia.org/wiki/Stochastic_gradient_descent>\n* Logistic Regression <https://en.wikipedia.org/wiki/Logistic_regression> with L-BFGS <https://en.wikipedia.org/wiki/Limited-memory_BFGS>\n* Support Vector Machines <https://en.wikipedia.org/wiki/Support_vector_machine>\n* Decision Trees <https://en.wikipedia.org/wiki/Decision_tree>\n* Gradient Boosted Trees <https://en.wikipedia.org/wiki/Gradient_boosting>\n* Naive Bayes <https://en.wikipedia.org/wiki/Naive_Bayes_classifier>","user":"anonymous","dateUpdated":"2017-12-12T14:27:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513074658231_-1479076386","id":"20171212-103058_161186422","dateCreated":"2017-12-12T10:30:58+0000","dateStarted":"2017-12-12T14:27:27+0000","dateFinished":"2017-12-12T14:27:27+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2042"},{"title":"Import Spark classes","text":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.mllib.feature.HashingTF\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.classification.NaiveBayes\nimport org.apache.spark.mllib.classification.{LogisticRegressionWithSGD,LogisticRegressionWithLBFGS}\nimport org.apache.spark.mllib.tree.RandomForest\nimport org.apache.spark.mllib.classification.SVMWithSGD\nimport org.apache.spark.mllib.tree.GradientBoostedTrees\nimport org.apache.spark.mllib.tree.configuration.BoostingStrategy","user":"anonymous","dateUpdated":"2017-12-12T16:31:42+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472110_-661221697","id":"20171103-192637_633852683","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:31:42+0000","dateFinished":"2017-12-12T16:31:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2043"},{"title":"Ingest sentences","text":"// Load 2 types of emails from text files: spam and ham (non-spam).\n// Each line has text from one email.\nval spam = sc.textFile(\"s3://jsimon-public/spam\")\nval ham = sc.textFile(\"s3://jsimon-public/ham\") ","user":"anonymous","dateUpdated":"2017-12-12T16:32:47+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472113_-651602975","id":"20171103-192703_618600372","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:32:47+0000","dateFinished":"2017-12-12T16:32:47+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2044"},{"title":"Map sentences to features","text":"// Create a HashingTF instance to map email text to vectors of 1000 features.\nval tf = new HashingTF(numFeatures = 200)\n// Each email is split into words, and each word is mapped to one feature.\nval spamFeatures = spam.map(email => tf.transform(email.split(\" \")))\nval hamFeatures = ham.map(email => tf.transform(email.split(\" \")))\n\n// Display features for a spam sample\nspamFeatures.take(1)\n// Display features for a ham sample\nhamFeatures.take(1)","user":"anonymous","dateUpdated":"2017-12-12T16:33:25+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472113_-651602975","id":"20171103-193110_69215172","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:33:25+0000","dateFinished":"2017-12-12T16:33:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2045"},{"title":"Label features","text":"// Create LabeledPoint datasets for positive (spam) and negative (ham) examples.\nval positiveExamples = spamFeatures.map(features => LabeledPoint(1, features))\nval negativeExamples = hamFeatures.map(features => LabeledPoint(0, features))\n\n// Display label for a spam sample\npositiveExamples.take(1)\n// Display label for a ham sample\nnegativeExamples.take(1)","user":"anonymous","dateUpdated":"2017-12-12T16:35:11+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472113_-651602975","id":"20171103-193056_931431977","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:35:11+0000","dateFinished":"2017-12-12T16:35:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2046"},{"title":"Split data set for training and test","text":"val data = positiveExamples.union(negativeExamples)\ndata.cache()\n// Split the data set 80/20\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\ntrainingData.cache()","user":"anonymous","dateUpdated":"2017-12-12T16:35:54+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472113_-651602975","id":"20171103-193130_50274934","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:35:54+0000","dateFinished":"2017-12-12T16:35:54+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2047"},{"title":"Train Logistic Regression model with SGD optimizer","text":"val numClasses = 2\n// https://spark.apache.org/docs/2.2.0/mllib-linear-methods.html#classification\n// Create a Logistic Regression model which uses the LBFGS optimizer.\nval lr = new LogisticRegressionWithSGD()\n// Train learning algorithm on the training data.\nval modelLR = lr.run(trainingData)","user":"anonymous","dateUpdated":"2017-12-12T16:36:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513075586762_761229447","id":"20171212-104626_1849963878","dateCreated":"2017-12-12T10:46:26+0000","dateStarted":"2017-12-12T16:36:17+0000","dateFinished":"2017-12-12T16:36:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2048"},{"title":"Measure accuracy of Logistic Regression model","text":"val predictionLabel = testData.map(x=> (modelLR.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:36:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513075991385_-1265428544","id":"20171212-105311_940814496","dateCreated":"2017-12-12T10:53:11+0000","dateStarted":"2017-12-12T16:36:37+0000","dateFinished":"2017-12-12T16:36:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2049"},{"title":"Train a Logistic Regression model with L-BFGS optimizer","text":"// https://spark.apache.org/docs/2.2.0/mllib-linear-methods.html#classification\n// Create a Logistic Regression model which uses the LBFGS optimizer.\nval lr = new LogisticRegressionWithLBFGS()\n// Train learning algorithm on the training data.\nval modelLR = lr.run(trainingData)","user":"anonymous","dateUpdated":"2017-12-12T16:37:00+0000","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171103-193428_1975982649","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:00+0000","dateFinished":"2017-12-12T16:37:01+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2050"},{"title":"Measure accuracy of Logistic Regression model","text":"val predictionLabel = testData.map(x=> (modelLR.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:37:09+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171103-194626_291922664","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:09+0000","dateFinished":"2017-12-12T16:37:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2051"},{"title":"Train a SVM model","text":"// https://spark.apache.org/docs/2.2.0/mllib-linear-methods.html#classification\nval numIterations = 100\nval modelSVM = SVMWithSGD.train(trainingData, numIterations)","user":"anonymous","dateUpdated":"2017-12-12T16:37:26+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472113_-651602975","id":"20171103-201603_1186133349","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:26+0000","dateFinished":"2017-12-12T16:37:27+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2052"},{"title":"Measure accuracy of SVM model","text":"val predictionLabel = testData.map(x=> (modelSVM.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:37:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171104-155851_1157439066","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:34+0000","dateFinished":"2017-12-12T16:37:35+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2053"},{"title":"Train Decision Tree model","text":"// https://spark.apache.org/docs/2.2.0/mllib-decision-tree.html\nval numClasses = 2\nval categoricalFeaturesInfo = Map[Int, Int]()\nval numTrees = 16\nval featureSubsetStrategy = \"auto\"\nval impurity = \"gini\"\nval maxDepth = 16\nval maxBins = 16\n\nval modelRF = RandomForest.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,\n  numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n","user":"anonymous","dateUpdated":"2017-12-12T16:37:46+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171103-195119_1813392511","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:46+0000","dateFinished":"2017-12-12T16:37:48+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2054"},{"title":"Measure accuracy of Decision Tree model","text":"val predictionLabel = testData.map(x=> (modelRF.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:37:53+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171103-200213_1528700725","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:37:53+0000","dateFinished":"2017-12-12T16:37:54+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2055"},{"title":"Train Gradient Boosted Trees model","text":"// https://spark.apache.org/docs/2.2.0/mllib-ensembles.html#gradient-boosted-trees-gbts\n// Train a GradientBoostedTrees model.\n// The defaultParams for Classification use LogLoss by default.\nval boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")\nboostingStrategy.numIterations = 10\nboostingStrategy.treeStrategy.numClasses = 2\nboostingStrategy.treeStrategy.maxDepth = 16\n// Empty categoricalFeaturesInfo indicates all features are continuous.\nboostingStrategy.treeStrategy.categoricalFeaturesInfo = Map[Int, Int]()\n\nval modelGBT = GradientBoostedTrees.train(trainingData, boostingStrategy)","user":"anonymous","dateUpdated":"2017-12-12T16:38:30+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171104-155925_2002383494","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:38:30+0000","dateFinished":"2017-12-12T16:38:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2056"},{"title":"Measure accuracy of Gradient Boosted Trees model","text":"val predictionLabel = testData.map(x=> (modelGBT.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:38:49+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472114_-650448728","id":"20171104-160231_214850096","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:38:50+0000","dateFinished":"2017-12-12T16:38:50+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2057"},{"title":"Train a Naive Bayes model","text":"// https://spark.apache.org/docs/2.2.0/mllib-naive-bayes.html\nval modelBayes = NaiveBayes.train(trainingData, 1.0)","user":"anonymous","dateUpdated":"2017-12-12T16:38:57+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472115_-650833477","id":"20171103-193144_439637897","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:38:57+0000","dateFinished":"2017-12-12T16:38:57+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2058"},{"title":"Measure accuracy of Naive Bayes model","text":"val predictionLabel = testData.map(x=> (modelBayes.predict(x.features),x.label))\nval accuracy = 1.0 * predictionLabel.filter(x => x._1 == x._2).count() / testData.count()","user":"anonymous","dateUpdated":"2017-12-12T16:39:03+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472115_-650833477","id":"20171103-193159_224907724","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:39:03+0000","dateFinished":"2017-12-12T16:39:03+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2059"},{"title":"Try new samples","text":"val posTestExample = tf.transform(\"You have won $1,000,000. Please fly to Nigeria ASAP\".split(\" \"))\nval negTestExample = tf.transform(\"Hi Mom, I started studying Spark the other day, it's awesome\".split(\" \"))\n\nprintln(s\"Prediction for positive test example: ${modelBayes.predict(posTestExample)}\")\nprintln(s\"Prediction for negative test example: ${modelBayes.predict(negTestExample)}\")","user":"anonymous","dateUpdated":"2017-12-12T16:39:38+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472115_-650833477","id":"20171103-200333_1832806360","dateCreated":"2017-12-12T10:11:12+0000","dateStarted":"2017-12-12T16:39:38+0000","dateFinished":"2017-12-12T16:39:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2060"},{"user":"anonymous","dateUpdated":"2017-12-12T14:00:28+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513073472115_-650833477","id":"20171104-160307_946818638","dateCreated":"2017-12-12T10:11:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2061"}],"name":"Spam classifier","id":"2D3E7XC8V","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}